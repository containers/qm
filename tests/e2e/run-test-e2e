#!/bin/bash
# shellcheck disable=SC1091
#
# Copyright 2023 The qm Authors
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.
#
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

source "${SCRIPT_DIR}"/lib/utils
source "${SCRIPT_DIR}"/lib/container
source "${SCRIPT_DIR}"/lib/systemd
source "${SCRIPT_DIR}"/lib/tests

# GLOBALS
export CONFIG_NODE_AGENT_PATH="/etc/hirte/agent.conf.d/agent.conf"
export REGISTRY_UBI8_MINIMAL="registry.access.redhat.com/ubi8/ubi-minimal"
export WAIT_HIRTE_SERVER_BE_READY_IN_SEC=5
export CONTROL_CONTAINER_NAME="control"
export NODES_FOR_TESTING=("control" "node1")
export IP_CONTROL_MACHINE=""

export BUILD_QM_FROM_GH_URL=""
export BUILD_HIRTE_FROM_GH_URL=""
export BRANCH_HIRTE=""
export BRANCH_QM=""

# If no additional nodes are required, use 1
if [ -z "${NUMBER_OF_NODES}" ]; then
    export NUMBER_OF_NODES=1
fi

if [ -z "${TAG_CONTROL_MACHINE}" ]; then
    export TAG_CONTROL_MACHINE="${CONTROL_CONTAINER_NAME}:latest"
fi

if [ -z "${NET_INTERFACE_IP_CONTROL}" ]; then
    export NET_INTERFACE_IP_CONTROL="eth0"
fi

# ====================== Start - int main {} ;-)
ARGUMENT_LIST=(
  "build-qm-from-gh-url"
  "branch-qm"
  "build-hirte-from-gh-url"
  "branch-hirte"
  "skip-tests"
  "number-of-nodes"
)

usage() {
	echo "Usage: $0 [OPTIONS]"
	echo
	echo "--help"
        echo -e "\tThis message"
	echo
	echo "--build-qm-from-gh-url"
	echo -e "\tBuild QM from a specific GitHub URL, useful for testing new features"
	echo "--branch-qm"
	echo -e "\tSpecify which branch the GitHub repo will be set. Requires --build-qm-from-gh-url"
	echo
	echo "--number-of-nodes"
	echo -e "\tSpecify number of nodes. (default 1)"
	echo
	echo "--build-hirte-from-gh-url"
	echo -e "\tBuild HIRTE from a specific GitHub URL, useful for testing new features"
	echo "--branch-hirte"
	echo -e "\tSpecify which branch the GitHub repo will be set. Requires --build-hirte-from-gh-url"
	echo "--skip-tests"
	echo -e "\tSpecify to avoid testing. --skip-tests"
	echo
	echo "Examples:"
	echo
	echo -e "\tNo args, it will install latest qm and hirte from copr rpm repository"
	echo -e "\t\t${0}"
	echo
	echo -e "\tBuild qm and hirte from a specific github url and select the branches"
	echo -e "\t\t${0} \\"
	echo -e "\t\t\t--branch-qm=superfeature \\"
	echo -e	"\t\t\t--build-qm-from-gh-url=https://github.com/MYUSER/qm.git \\"
	echo -e "\t\t\t--branch-hirte=superfeature"
	echo -e	"\t\t\t--build-hirte-from-gh-url=https://github.com/MYUSER/hirte.git \\"
	echo
	exit 0
}

# read arguments
opts=$(getopt \
  --longoptions "$(printf "help,%s:," "${ARGUMENT_LIST[@]}")" \
  --name "$(basename "$0")" \
  --options "" \
  -- "$@"
)

eval set --"${opts}"

while [[ $# -gt 0 ]]; do
  case "$1" in
    --branch-qm)
      BRANCH_QM="${2}"
      shift 2
      ;;

    --branch-hirte)
      BRANCH_HIRTE="${2}"
      shift 2

      ;;
    --build-qm-from-gh-url)
      if [ -z "${BRANCH_QM}" ]; then
          BRANCH_QM="main"
      fi
      BUILD_QM_FROM_GH_URL="${2}"
      shift 2
      ;;

    --build-hirte-from-gh-url)
      if [ -z "${BRANCH_HIRTE}" ]; then
          BRANCH_HIRTE="main"
      fi
      BUILD_HIRTE_FROM_GH_URL="${2}"
      shift 2
      ;;

    --skip-tests)
      SKIP_TESTS="${2}"
      shift 2
      ;;

    --number-of-nodes)
      NUMBER_OF_NODES="${2}"

      # avoid "too many files opened"
      sysctl fs.inotify.max_user_instances=$((${2}*100))

      shift 2
      ;;

    --help)
      usage
      ;;
    *)
      break
      ;;
  esac
done

info_message "Starting setup"
info_message "=============================="
if [ "$EUID" -ne 0 ]
then
    echo -e "[\033[91m ERROR\033[0m ] Please run as root this script. It requires to set limits inside a container which is not allowed by root."
    exit
fi

info_message "Creating dual stack network"
podman network \
    create --ipv6 --gateway fd00::1:8:1 --subnet fd00::1:8:0/112 \
    --gateway 10.90.0.1 --subnet 10.90.0.0/16 podmanDualStack

info_message "Cleaning any previous e2e files"
cleanup

echo
info_message "Preparing ASIL environment"
info_message "=============================="

# If user would like to build hirte from source code, let's adjust the ContainerFile
if [ -n "${BUILD_HIRTE_FROM_GH_URL}" ]; then
    echo
    info_message "Building hirte from source code, using:"
    info_message "=============================="
    info_message "\tGH URL: ${BUILD_HIRTE_FROM_GH_URL}"
    info_message "\tBranch: ${BRANCH_HIRTE}"
    echo
    sed -i -e 's#@BUILD_HIRTE_FROM_GH_URL@#'"${BUILD_HIRTE_FROM_GH_URL}"'#g' ./lib/ContainerFile.template
    sed -i -e 's/@BRANCH_HIRTE@/'"${BRANCH_HIRTE}"'/g' ./lib/ContainerFile.template
    sed -i -e 's/# \[manually install hirte\] //' ./lib/ContainerFile.template
fi

# Creates the control container - a.k.a ASIL
create_asil_node

# Create pods regarding ASIL services
srvs_asil=("safety" "cruise_control" "tires" "breaks")
create_stub_systemd_srv "${CONTROL_CONTAINER_NAME}" "" "${srvs_asil[@]}"

echo
info_message "Preparing QM environment"
info_message "=============================="

# Creates the node container - a.k.a QM
create_qm_node

# Create pods regarding QM services
srvs_qm=("radio" "store" "stream_audio" "maps")
create_stub_systemd_srv "node1" "qm" "${srvs_qm[@]}"

# Tests
echo
info_message "Starting tests"
info_message "=============================="
info_message "Waiting hirte containers be ready..."
sleep "${WAIT_HIRTE_SERVER_BE_READY_IN_SEC}"
# see: https://github.com/containers/hirte/issues/281

if [ "${SKIP_TESTS}" == "yes" ]; then
  info_message "skip tests"
  info_message "=============================="
  exit 0
fi

echo
info_message "#1- Test scenario: hirte list all units from control to node (vise-versa)"
test_hirte_list_all_units

info_message "All set!"
