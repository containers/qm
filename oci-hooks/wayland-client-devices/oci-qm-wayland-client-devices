#!/bin/bash

set -euo pipefail

# Configuration
LOGFILE="/var/log/qm-wayland-client-devices.log"
HOOK_NAME="qm-wayland-client-devices"

# Logging function
log() {
    local level="$1"
    shift
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $HOOK_NAME - $level - $*" >> "$LOGFILE"
    if [[ "$level" == "ERROR" ]]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - $HOOK_NAME - $level - $*" >&2
    fi
}

input="-"
CONTAINER_CONFIG=$(cat "$input")

if [[ -z "$CONTAINER_CONFIG" ]]; then
    log "ERROR" "Failed to read OCI spec from stdin"
    exit 1
fi

GPU_ENABLED=$(echo "$CONTAINER_CONFIG" | jq -r '.annotations["org.containers.qm.wayland-client.gpu"] // empty')

DEVNAME_LIST=()

if [ -n "$GPU_ENABLED" ]; then
    log "INFO" "Processing Wayland client GPU annotation: $GPU_ENABLED"

    # Find all the render devices available
    RENDER_DEVICES=$(find /dev/dri -type c \( -regex ".*/render.*" \))
    log "INFO" "Scanning for GPU render devices"

    for RENDER_DEVICE in $RENDER_DEVICES; do
        DEVNAME_LIST+=("$RENDER_DEVICE")
        log "INFO" "Adding GPU render device: $RENDER_DEVICE"
    done

    log "INFO" "Found ${#DEVNAME_LIST[@]} GPU render devices"
else
    log "INFO" "No Wayland client GPU annotation found"
fi

# Iterate over the DEVNAME_LIST to include the required information in the CONTAINER_CONFIG
if [ ${#DEVNAME_LIST[@]} -gt 0 ]; then
    log "INFO" "Processing ${#DEVNAME_LIST[@]} GPU devices for Wayland client"

    for DEVICE in "${DEVNAME_LIST[@]}"; do
        if ! jq -e ".linux.devices[] | select(.path == \"$DEVICE\")" <<< "$CONTAINER_CONFIG" > /dev/null 2>&1; then
            # shellcheck disable=SC2012
            NEW_DEVICE=$(jq -n --arg path "$DEVICE"                                      \
                               --arg dev_type "$(ls -l "$DEVICE" | head -c 1)"           \
                               --arg major "$(printf "%d" "$(stat -c "%#t" "$DEVICE")")"      \
                               --arg minor "$(printf "%d" "$(stat -c "%#T" "$DEVICE")")"      \
                               --arg filemode "$(printf "%d" "$(stat -c '02%#a' "$DEVICE")")" \
                               --arg uid "$(stat -c "%u" "$DEVICE")"                       \
                               --arg gid "$(stat -c "%g" "$DEVICE")"                       \
                            '{
                                "path": $path,
                                "type": $dev_type,
                                "major": $major|tonumber,
                                "minor": $minor|tonumber,
                                "fileMode": $filemode|tonumber,
                                "uid": $uid|tonumber,
                                "gid": $gid|tonumber,
                            }')

            # shellcheck disable=SC2012
            NEW_DEV_RESOURCE=$(jq -n                                                \
                               --arg dev_type "$(ls -l "$DEVICE" | head -c 1)"      \
                               --arg major "$(printf "%d" "$(stat -c "%#t" "$DEVICE")")" \
                               --arg minor "$(printf "%d" "$(stat -c "%#T" "$DEVICE")")" \
                            '{
                                "allow": true,
                                "type": $dev_type,
                                "major": $major|tonumber,
                                "minor": $minor|tonumber,
                                "access": "rwm"
                            }')

            CONTAINER_CONFIG=$(jq ".linux.devices += [$NEW_DEVICE]" <<< "$CONTAINER_CONFIG")
            CONTAINER_CONFIG=$(jq ".linux.resources.devices += [$NEW_DEV_RESOURCE]" <<< "$CONTAINER_CONFIG")
            log "INFO" "Added GPU device: $DEVICE"
        else
            log "INFO" "GPU device already exists in spec: $DEVICE"
        fi
    done

    log "INFO" "Successfully processed all GPU devices for Wayland client"
else
    log "INFO" "No GPU devices to process for Wayland client"
fi

# Initialize log file directory
mkdir -p "$(dirname "$LOGFILE")"
touch "$LOGFILE"

# Count total devices in final spec
total_devices=$(echo "$CONTAINER_CONFIG" | jq '.linux.devices | length // 0')
log "INFO" "Total devices in final spec: $total_devices"
log "INFO" "QM Wayland Client Devices hook completed successfully"

echo "$CONTAINER_CONFIG" | jq .

