#!/bin/bash

set -euo pipefail

# Configuration
LOGFILE="/var/log/qm-wayland-session-devices.log"
HOOK_NAME="qm-wayland-session-devices"

# Logging function
log() {
    local level="$1"
    shift
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $HOOK_NAME - $level - $*" >> "$LOGFILE"
    if [[ "$level" == "ERROR" ]]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - $HOOK_NAME - $level - $*" >&2
    fi
}

input="-"
CONTAINER_CONFIG=$(cat "$input")

if [[ -z "$CONTAINER_CONFIG" ]]; then
    log "ERROR" "Failed to read OCI spec from stdin"
    exit 1
fi

SEAT=$(echo "$CONTAINER_CONFIG" | jq -r '.annotations["org.containers.qm.wayland.seat"] // empty')

DEVNAME_LIST=()

if [ -n "$SEAT" ]; then
    log "INFO" "Processing Wayland seat annotation: $SEAT"

    # Extract and resolve all the devices associated to a systemd-logind seat
    SEAT_SYS_DEVICE_LIST=$(loginctl seat-status "$SEAT" | grep -oP '/sys\S+')
    log "INFO" "Found seat system devices for $SEAT"

    for DEVICE in $SEAT_SYS_DEVICE_LIST; do
        DEVNAME=$(udevadm info -x "$DEVICE" | grep -oP '^E: DEVNAME=\K.*')

        if [ -n "$DEVNAME" ]; then
            DEVNAME_LIST+=("$DEVNAME")
            log "INFO" "Adding seat device: $DEVNAME"
        fi
    done

    # Find all the input devices available
    INPUT_DEVICES=$(find /dev/input -type c \( -regex ".*/event[0-9]+" -o -regex ".*/mice[0-9]*" -o -regex ".*/mouse[0-9]+" \))
    for INPUT_DEVICE in $INPUT_DEVICES; do
        DEVNAME_LIST+=("$INPUT_DEVICE")
        log "INFO" "Adding input device: $INPUT_DEVICE"
    done

    # Find all the render devices available
    RENDER_DEVICES=$(find /dev/dri -type c \( -regex ".*/render.*" \))
    for RENDER_DEVICE in $RENDER_DEVICES; do
        DEVNAME_LIST+=("$RENDER_DEVICE")
        log "INFO" "Adding render device: $RENDER_DEVICE"
    done

    # Check if .linux.devices exists and is a list in $CONTAINER_CONFIG
    if ! jq -e '.linux.devices | arrays' <<< "$CONTAINER_CONFIG" > /dev/null 2>&1; then
        # Create an empty .linux.devices list if it does not exist
        CONTAINER_CONFIG=$(jq '.linux.devices = []' <<< "$CONTAINER_CONFIG")
        log "INFO" "Initialized empty devices list in OCI spec"
    fi

    # Iterate over the DEVNAME_LIST to include the required information in the CONTAINER_CONFIG
    log "INFO" "Processing ${#DEVNAME_LIST[@]} devices for Wayland seat $SEAT"
    for DEVICE in "${DEVNAME_LIST[@]}"; do
        if ! jq -e ".linux.devices[] | select(.path == \"$DEVICE\")" <<< "$CONTAINER_CONFIG" > /dev/null 2>&1; then
            # shellcheck disable=SC2012
            NEW_DEVICE=$(jq -n --arg path "$DEVICE"                                      \
                               --arg dev_type "$(ls -l "$DEVICE" | head -c 1)"           \
                               --arg major "$(printf "%d" "$(stat -c "%#t" "$DEVICE")")"      \
                               --arg minor "$(printf "%d" "$(stat -c "%#T" "$DEVICE")")"      \
                               --arg filemode "$(printf "%d" "$(stat -c '02%#a' "$DEVICE")")" \
                               --arg uid "$(stat -c "%u" "$DEVICE")"                       \
                               --arg gid "$(stat -c "%g" "$DEVICE")"                       \
                            '{
                                "path": $path,
                                "type": $dev_type,
                                "major": $major|tonumber,
                                "minor": $minor|tonumber,
                                "fileMode": $filemode|tonumber,
                                "uid": $uid|tonumber,
                                "gid": $gid|tonumber,
                            }')

            # shellcheck disable=SC2012
            NEW_DEV_RESOURCE=$(jq -n                                                \
                               --arg dev_type "$(ls -l "$DEVICE" | head -c 1)"      \
                               --arg major "$(printf "%d" "$(stat -c "%#t" "$DEVICE")")" \
                               --arg minor "$(printf "%d" "$(stat -c "%#T" "$DEVICE")")" \
                            '{
                                "allow": true,
                                "type": $dev_type,
                                "major": $major|tonumber,
                                "minor": $minor|tonumber,
                                "access": "rwm"
                            }')

            CONTAINER_CONFIG=$(jq ".linux.devices += [$NEW_DEVICE]" <<< "$CONTAINER_CONFIG")
            CONTAINER_CONFIG=$(jq ".linux.resources.devices += [$NEW_DEV_RESOURCE]" <<< "$CONTAINER_CONFIG")
            log "INFO" "Added Wayland seat device: $DEVICE"
        else
            log "INFO" "Device already exists in spec: $DEVICE"
        fi
    done

    log "INFO" "Successfully processed all Wayland seat devices for $SEAT"
else
    log "INFO" "No Wayland seat annotation found"
fi

# Initialize log file directory
mkdir -p "$(dirname "$LOGFILE")"
touch "$LOGFILE"

# Count total devices in final spec
total_devices=$(echo "$CONTAINER_CONFIG" | jq '.linux.devices | length // 0')
log "INFO" "Total devices in final spec: $total_devices"
log "INFO" "QM Wayland Session Devices hook completed successfully"

echo "$CONTAINER_CONFIG" | jq .
